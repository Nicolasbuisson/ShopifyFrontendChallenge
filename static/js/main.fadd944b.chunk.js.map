{"version":3,"sources":["components/MovieRanker.js","App.js","reportWebVitals.js","index.js"],"names":["MovieRanker","document","title","useState","searchTerm","setSearchTerm","foundMovies","setFoundMovies","nominatedMovies","setNominatedMovies","completed","setCompleted","removeNomination","event","index","indexOf","target","value","splice","newNominatedMovies","nominateMovie","searchMovies","a","url","fetch","response","json","responseJson","moviesTitleYear","undefined","Search","i","length","push","Title","Year","useEffect","className","type","placeholder","onChange","map","foundMovie","onClick","disabled","includes","nominatedMovie","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fadd944b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/MovieRanker.css\";\r\n\r\nconst MovieRanker = () => {\r\n  document.title = \"The Shoppies\";\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [foundMovies, setFoundMovies] = useState([]);\r\n  const [nominatedMovies, setNominatedMovies] = useState([]);\r\n  const [completed, setCompleted] = useState(false);\r\n\r\n  const checkNominatedMoviesSize = () => {\r\n    setCompleted(nominatedMovies.length >= 5);\r\n  };\r\n\r\n  const updateSearchTerm = (event) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const removeNomination = (event) => {\r\n    let index = nominatedMovies.indexOf(event.target.value);\r\n    nominatedMovies.splice(index, 1);\r\n    let newNominatedMovies = [...nominatedMovies];\r\n    setNominatedMovies(newNominatedMovies);\r\n  };\r\n\r\n  const nominateMovie = (event) => {\r\n    let newNominatedMovies = [...nominatedMovies, event.target.value];\r\n    setNominatedMovies(newNominatedMovies);\r\n  };\r\n\r\n  const searchMovies = async () => {\r\n    let url =\r\n      \"https://www.omdbapi.com/?apikey=7409b0fc&type=movie&s=\" + searchTerm;\r\n\r\n    let response = await fetch(url);\r\n    let responseJson = await response.json();\r\n\r\n    let moviesTitleYear = [];\r\n    if (responseJson.Search !== undefined) {\r\n      for (let i = 0; i < responseJson.Search.length; i++) {\r\n        if (i === 7) {\r\n          break;\r\n        }\r\n        moviesTitleYear.push(\r\n          responseJson.Search[i].Title +\r\n            \" (\" +\r\n            responseJson.Search[i].Year +\r\n            \")\"\r\n        );\r\n      }\r\n      setFoundMovies(moviesTitleYear);\r\n    } else {\r\n      setFoundMovies([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    searchMovies();\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    checkNominatedMoviesSize();\r\n  }, [nominatedMovies]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"main-title\">The Shoppies</h1>\r\n      <p className=\"main-para\">\r\n        Select 5 movies as Nominees. <strong className=\"You-term\">You</strong>{\" \"}\r\n        decide.\r\n      </p>\r\n      <div className=\"grid-container\">\r\n        <div className=\"search-container\">\r\n          <div className=\"search-bar\">\r\n            <div className=\"icon magnifier\"></div>\r\n            <input\r\n              className=\"search-bar-input\"\r\n              type=\"text\"\r\n              placeholder=\"Search by movie title\"\r\n              value={searchTerm}\r\n              onChange={updateSearchTerm}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"foundMovies-container\">\r\n          <div className=\"icon film\"></div>\r\n          <h2 className=\"subtitle\">Results for \"{searchTerm}\"</h2>\r\n          <ul className=\"foundMovies-list\">\r\n            {foundMovies.map((foundMovie) => (\r\n              <li className=\"foundMovies-list-item\">\r\n                <div className=\"foundMovies-list-label\">{foundMovie}</div>\r\n                <button\r\n                  className=\"foundMovies-list-button\"\r\n                  onClick={nominateMovie}\r\n                  value={foundMovie}\r\n                  disabled={nominatedMovies.includes(foundMovie) || completed}\r\n                >\r\n                  Nominate\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"nominatedMovies-container\">\r\n          <div className=\"icon trophy\"></div>\r\n          <h2 className=\"subtitle\">Nominations</h2>\r\n          <ul className=\"nominatedMovies-list\">\r\n            {nominatedMovies.map((nominatedMovie) => (\r\n              <li className=\"nominatedMovies-list-item\">\r\n                <div className=\"nominatedMovies-list-label\">\r\n                  {nominatedMovie}\r\n                </div>\r\n                <button\r\n                  className=\"nominatedMovies-list-button\"\r\n                  onClick={removeNomination}\r\n                  value={nominatedMovie}\r\n                >\r\n                  Remove\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div\r\n          className={\r\n            completed\r\n              ? \"banner-container banner-container-show\"\r\n              : \"banner-container\"\r\n          }\r\n        >\r\n          <p className=\"banner-text\">\r\n            Congratulations! You've completed your selection\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default MovieRanker;\r\n","import MovieRanker from \"./components/MovieRanker\";\n\nfunction App() {\n  return <MovieRanker></MovieRanker>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}